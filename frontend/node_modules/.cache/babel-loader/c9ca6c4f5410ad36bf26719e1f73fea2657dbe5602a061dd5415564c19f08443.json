{"ast":null,"code":"import React,{createContext,useState,useEffect}from\"react\";import{login as apiLogin}from\"../api\";import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext({isAuthenticated:false,login:async()=>{},logout:()=>{}});export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);useEffect(()=>{// Check if user is already logged in\nconst token=localStorage.getItem(\"token\");if(token){setIsAuthenticated(true);}},[]);const login=async(username,password)=>{try{const data=await apiLogin(username,password);localStorage.setItem(\"token\",data.token);setIsAuthenticated(true);}catch(error){throw new Error(\"Login failed\");}};const logout=()=>{localStorage.removeItem(\"token\");setIsAuthenticated(false);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,login,logout},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","login","apiLogin","jsx","_jsx","AuthContext","isAuthenticated","logout","AuthProvider","_ref","children","setIsAuthenticated","token","localStorage","getItem","username","password","data","setItem","error","Error","removeItem","Provider","value"],"sources":["/Users/khatirakazemi/Documents/GitHub/SecureNotes/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from \"react\";\nimport { login as apiLogin } from \"../api\";\nimport { AuthContextType } from \"../types\";\n\nexport const AuthContext = createContext<AuthContextType>({\n  isAuthenticated: false,\n  login: async () => {},\n  logout: () => {},\n});\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const data = await apiLogin(username, password);\n      localStorage.setItem(\"token\", data.token);\n      setIsAuthenticated(true);\n    } catch (error) {\n      throw new Error(\"Login failed\");\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAC5E,OAASC,KAAK,GAAI,CAAAC,QAAQ,KAAQ,QAAQ,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAG3C,MAAO,MAAM,CAAAC,WAAW,cAAGP,aAAa,CAAkB,CACxDQ,eAAe,CAAE,KAAK,CACtBL,KAAK,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CACrBM,MAAM,CAAEA,CAAA,GAAM,CAAC,CACjB,CAAC,CAAC,CAMF,MAAO,MAAM,CAAAC,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACH,eAAe,CAAEK,kBAAkB,CAAC,CAAGZ,QAAQ,CAAU,KAAK,CAAC,CAEtEC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAY,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAV,KAAK,CAAG,KAAAA,CAAOc,QAAgB,CAAEC,QAAgB,GAAK,CAC1D,GAAI,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAf,QAAQ,CAACa,QAAQ,CAAEC,QAAQ,CAAC,CAC/CH,YAAY,CAACK,OAAO,CAAC,OAAO,CAAED,IAAI,CAACL,KAAK,CAAC,CACzCD,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAE,MAAOQ,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,cAAc,CAAC,CACjC,CACF,CAAC,CAED,KAAM,CAAAb,MAAM,CAAGA,CAAA,GAAM,CACnBM,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC,CAChCV,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CAAC,CAED,mBACEP,IAAA,CAACC,WAAW,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEjB,eAAe,CAAEL,KAAK,CAAEM,MAAO,CAAE,CAAAG,QAAA,CAC7DA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}